{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Swagger","props","sortFunction","a","b","nameA","toUpperCase","nameB","state","docs","activeDoc","this","swaggerDocs","setState","id","onClick","openNav","className","closeNav","Object","keys","map","key","setActiveDoc","info","title","spec","fetch","process","manifestFiles","json","structure","getSwaggerManifestFile","manifest","match","getSwaggerDocFile","replace","swaggerDoc","substruct","sort","reduce","obj","name","fileResponse","forEach","element","document","getElementById","style","width","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App"],"mappings":"kVAsGeA,E,kDAjGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmFRC,aAAe,SAACC,EAAGC,GACjB,IAAIC,EAAQF,EAAEG,cACVC,EAAQH,EAAEE,cACd,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,GA3FP,EAAKC,MAAQ,CAAEC,KAAM,GAAIC,UAAW,IAFnB,E,4FAKnB,4BAAAP,EAAA,sEACqBQ,KAAKC,cAD1B,OACQH,EADR,OAEEE,KAAKE,SAAS,CAAEJ,KAAMA,IAFxB,gD,0EAKA,WAAU,IAAD,OACP,OACE,sBAAKK,GAAG,OAAR,UACE,wBAAQC,QAAS,kBAAM,EAAKC,WAA5B,SAAuC,mBAAGC,UAAU,0BACpD,sBAAKH,GAAG,YAAYG,UAAU,UAA9B,UACE,oBAAIA,UAAU,QAAd,2BACA,wBAAQA,UAAU,WAAWF,QAAS,kBAAM,EAAKG,YAAjD,SAA6D,mBAAGD,UAAU,kBACzEN,KAAKH,MAAMC,KACT,qBAAIQ,UAAU,kBAAd,UACEE,OAAOC,KAAKT,KAAKH,MAAMC,MAAMY,KAAI,SAAAC,GAAG,OAAI,6BAAc,wBAAQP,QAAS,kBAAM,EAAKQ,aAAaD,IAAzC,SAAgD,EAAKd,MAAMC,KAAKa,GAAKE,KAAKC,SAA/EH,MAClD,6BAAI,wBAAQP,QAAS,kBAAM,EAAKQ,aAAa,KAAzC,wBACI,2BAEd,8BACGZ,KAAKH,MAAME,UACV,cAAC,IAAD,CAAWgB,KAAMf,KAAKH,MAAMC,KAAKE,KAAKH,MAAME,aAAmB,+B,2EAOzE,4BAAAP,EAAA,sEAC8BwB,MAAMC,4CADpC,cACQC,EADR,gBAEeA,EAAcC,OAF7B,mF,sHAKA,wCAAA3B,EAAA,6DACM4B,EAAY,GADlB,SAEyBpB,KAAKqB,yBAF9B,OAEQC,EAFR,qBAGoBA,GAHpB,8DAGaX,EAHb,SAIYY,MAAM,SAAYvB,KAAKH,MAAMC,KAAKa,GAJ9C,kCAK+BX,KAAKwB,kBAAkBb,EAAIc,QAAQ,KAAM,KALxE,QAKYC,EALZ,QAMYC,EAAY,IACRhB,GAAOe,EACjBN,EAAS,2BAAQA,GAAcO,GARrC,wKAWSnB,OAAOC,KAAKW,GAAWQ,KAAK5B,KAAKT,cAAcsC,QACpD,SAACC,EAAKnB,GAEJ,OADAmB,EAAInB,GAAOS,EAAUT,GACdmB,IAET,KAhBJ,gE,4HAoBA,WAAwBC,GAAxB,eAAAvC,EAAA,sEAC6BwB,MAAMC,iBAAA,wBAA0Cc,IAD7E,cACQC,EADR,gBAEeA,EAAab,OAF5B,mF,wHAKA,WAAmBY,GAAnB,SAAAvC,EAAA,sEACQQ,KAAKE,SAAS,CAAEH,UAAWgC,IADnC,gD,kFAIA,WACE,IAAI/B,KAAKH,MAAMC,KAKb,OAAO,uCAJPE,KAAKH,MAAMC,KAAKmC,SAAQ,SAAAC,GACtB,OAAO,iCAASA,S,qBAOtB,WACEC,SAASC,eAAe,aAAaC,MAAMC,MAAQ,U,sBAGrD,WACEH,SAASC,eAAe,aAAaC,MAAMC,MAAQ,Q,GAlFjCC,IAAMC,WCQbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFlB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.96130376.chunk.js","sourcesContent":["import React from \"react\";\r\nimport SwaggerUI from \"swagger-ui-react\"\r\nimport \"swagger-ui-react/swagger-ui.css\"\r\n\r\nclass Swagger extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { docs: {}, activeDoc: \"\" };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const docs = await this.swaggerDocs()\r\n    this.setState({ docs: docs })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main\">\r\n        <button onClick={() => this.openNav()}><i className=\"fa fa-align-justify\"></i></button>\r\n        <div id=\"mySidenav\" className=\"sidenav\">\r\n          <h2 className=\"white\">Documentation</h2>\r\n          <button className=\"closebtn\" onClick={() => this.closeNav()}><i className=\"fa fa-times\"></i></button>\r\n          {this.state.docs ?\r\n            (<ul className=\"no-bullet white\">\r\n              {Object.keys(this.state.docs).map(key => <li key={key}><button onClick={() => this.setActiveDoc(key)}>{this.state.docs[key].info.title}</button></li>)}\r\n              <li><button onClick={() => this.setActiveDoc(\"\")}>Clear</button></li>\r\n            </ul>) : (<div></div>)}\r\n        </div>\r\n        <div>\r\n          {this.state.activeDoc ? (\r\n            <SwaggerUI spec={this.state.docs[this.state.activeDoc]} />) : (<div></div>)\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  async getSwaggerManifestFile() {\r\n    const manifestFiles = await fetch(process.env.PUBLIC_URL + '/swagger-doc-manifest.json');\r\n    return await manifestFiles.json()\r\n  }\r\n\r\n  async swaggerDocs() {\r\n    var structure = {}\r\n    const manifest = await this.getSwaggerManifestFile();\r\n    for (const key of manifest) {\r\n      if (key.match(/json/) && !this.state.docs[key]) {\r\n        const swaggerDoc = await this.getSwaggerDocFile(key.replace('./', ''))\r\n        const substruct = {}\r\n        substruct[key] = swaggerDoc\r\n        structure = { ...structure, ...substruct }\r\n      }\r\n    }\r\n    return Object.keys(structure).sort(this.sortFunction).reduce(\r\n      (obj, key) => {\r\n        obj[key] = structure[key];\r\n        return obj;\r\n      },\r\n      {}\r\n    );\r\n  }\r\n\r\n  async getSwaggerDocFile(name) {\r\n    const fileResponse = await fetch(process.env.PUBLIC_URL + `/swagger-docs/${name}`)\r\n    return await fileResponse.json()\r\n  }\r\n\r\n  async setActiveDoc(name) {\r\n    await this.setState({ activeDoc: name })\r\n  }\r\n\r\n  renderButtons() {\r\n    if (this.state.docs) {\r\n      this.state.docs.forEach(element => {\r\n        return <button>{element}</button>\r\n      });\r\n    } else {\r\n      return <button>$</button>\r\n    }\r\n  }\r\n\r\n  openNav() {\r\n    document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  }\r\n\r\n  closeNav() {\r\n    document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  }\r\n\r\n  sortFunction = (a, b) => {\r\n    var nameA = a.toUpperCase();\r\n    var nameB = b.toUpperCase();\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport default Swagger;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}